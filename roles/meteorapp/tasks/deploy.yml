
  # - include: create_dirs.yml
  #- include_vars: hipchat.yml

  #- name: letting people know whats going on
  #  hipchat: room={{hipchat_room}} token={{hipchat_token}} color="yellow" msg="Starting deployment of {{ app_git_checkout }} on {{ ansible_hostname }}. Root url is {{root_url}}." validate_certs=no
  #  ignore_errors: yes
  #

#  - debug: var=nginx_enable_ssl
#  - debug: var=ssl_key
#  - debug: var=ssl_certificate
#  - debug: var=nginx_ssl_key_file_name
#  - debug: var=nginx_ssl_cert_file_name


  - name: ensure github.com is a known host
    lineinfile:
      dest: ~/.ssh/known_hosts
      create: yes
      state: present
      line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
      regexp: "^github\\.com"


  - name: ensure bitbucket.org is a known host
    lineinfile:
      dest: ~/.ssh/known_hosts
      create: yes
      state: present
      line: "{{ lookup('pipe', 'ssh-keyscan -t rsa bitbucket.org') }}"
      regexp: "^github\\.org"

  - set_fact:
      app_path: "{{ app_root_dir }}/{{app_git_relative_dir}}"

  - fail: |
          "to enable ssl please provide all of the following variables:
            - nginx_enable_ssl,
            - ssl_key,
            - ssl_certificate,
            - nginx_ssl_key_file_name
            - nginx_ssl_cert_file_name"
    when: (nginx_enable_ssl and not (
      ssl_key is defined
      and ssl_certificate is defined
      and nginx_ssl_key_file_name is defined
      and nginx_ssl_cert_file_name is defined
      ))

  - name: ensure .ssh dir exists
    file: path=~/.ssh state=directory
    when: git_deploy_private_key is defined

  - name: copy deploy keyfile
    copy:
      content: "{{ git_deploy_private_key }}"
      dest: "~/.ssh/id_rsa_git"
    when: git_deploy_private_key is defined

  - name: restrict permissions for the key
    file: path=~/.ssh/id_rsa_git owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} mode=0700 state=file
    when: git_deploy_private_key is defined

  - name: add deploy key to ssh config
    when: git_deploy_private_key is defined
    lineinfile:
      dest=~/.ssh/config
      regexp="id_rsa_git"
      line="IdentityFile ~/.ssh/id_rsa_git"
      state=present
      create=yes

  - name: copy ssl key
    copy:
      content: "{{ ssl_key }}"
      dest: /etc/ssl/private/{{ nginx_ssl_key_file_name }}
    sudo: yes
    when: nginx_enable_ssl
    notify:
      - restart nginx

  - name: copy ssl cert
    copy:
      content: "{{ ssl_certificate }}"
      dest: /etc/ssl/certs/{{ nginx_ssl_cert_file_name }}
    sudo: yes
    when: nginx_enable_ssl
    notify:
      - restart nginx


  - name: ensure app group exists
    group: name={{ passenger_group }} state=present
    sudo: yes

  - name: ensure app user exists
    user: name={{ passenger_user }} group={{ passenger_group }}
    sudo: yes

  - name: create directory
    sudo: yes
    file:
      path={{ app_root_dir }}
      state=directory
      owner={{ ansible_ssh_user }}
      group={{ ansible_ssh_user }}


  - name: clone repo from github
    git: repo={{ app_git_repo | mandatory }}
         update=yes
         dest={{ app_root_dir }}
         version={{ app_git_checkout }}
         accept_hostkey=yes
         force=yes
    register: git_checkout_result

  - set_fact:
      app_checkout_bundle_path="{{ app_bundle_dir }}/{{ git_checkout_result.after }}"

  - stat: path={{ app_checkout_bundle_path }}/bundle
    register: app_bundle_checkout_dir_stat

  - set_fact:
      do_bundle_meteor_app: >
          app_always_bundle or
            not (
              app_bundle_checkout_dir_stat.stat.isdir is defined
              and app_bundle_checkout_dir_stat.stat.isdir
            )
  - copy: dest="{{ app_root_dir }}/.meteor/platforms" src=meteor_platforms force=yes


  - include: replace_meteor_bundle.yml
    when: do_bundle_meteor_app

  - name: ensure correct owner, group and permissions
    file:
      path={{ app_checkout_bundle_path }}
      owner={{ passenger_user }}
      group={{ passenger_group }}
      mode=0755
      recurse=true
    sudo: yes

  - name: get app settings
    command: cat "{{ app_path }}/{{ meteor_settings_file }}"
    register: var_meteor_settings
    when: meteor_settings_file is defined

  - set_fact: meteor_settings="{{ var_meteor_settings.stdout }}"
    when: meteor_settings_file is defined

  - set_fact: meteor_settings=""
    when: not meteor_settings_file is defined

  - name: copy nginx conf
    template:
      backup=true
      dest=/etc/nginx/sites-available/{{ nginx_config_file_name | mandatory }}
      src=nginx-site-config.j2
    sudo: yes
    notify:
      - restart nginx

  - name: make sure symlink exists
    file:
      src=/etc/nginx/sites-available/{{ nginx_config_file_name | mandatory }}
      dest=/etc/nginx/sites-enabled/{{ nginx_config_file_name }}
      state=link
    sudo: yes

  - name: make sure nginx is running
    service: name=nginx state=started
