  - debug: msg={{ groups['appservers'] }}
  - set_fact: deploy_commit={{ hostvars['localhost']['git_checkout_result']['after'] }}

  - set_fact:
      app_path="{{ app_root_dir }}/{{ app_git_relative_dir }}"
      meteor_settings_file_exists="{{ hostvars['localhost']['meteor_settings'] }}"
      app_checkout_bundle_path="{{ app_bundle_dir }}/{{ deploy_commit }}"
      tarball_destination="{{ app_bundle_dir }}/{{ deploy_commit }}.tar.gz"

  - file: path={{ app_bundle_dir }} state=directory
    sudo: yes

  - apt: name=python-boto update_cache=yes state=present
    sudo: yes

  - name: find all files that are older than three days
    find:
      paths: "{{ app_bundle_dir }}"
      age: "3d"
      file_type: directory
    register: older_bundles

  - name: remove older than 3 days but first five newest
    file:
      path: "{{ item.path }}"
      state: absent
    with_items: "{{ (older_bundles.files | sort(attribute='ctime'))[5:] | list[::-1] }}"

  - s3: bucket="{{ s3_bucket }}"
        dest="{{ tarball_destination }}"
        object="{{ deploy_commit }}.tar.gz"
        mode="get"
        region=eu-west-1
        aws_access_key="{{ aws_access_key }}"
        aws_secret_key="{{ aws_secret_key }}"
    sudo: yes

  - file: path={{ app_checkout_bundle_path }} state=absent
    sudo: yes

  - name: create directory
    sudo: yes
    file:
      path={{ app_checkout_bundle_path }}
      state=directory
      owner={{ ansible_ssh_user }}
      group={{ ansible_ssh_user }}



  - name: extract bundle
    command: tar -xf {{ app_bundle_dir }}/{{ deploy_commit }}.tar.gz -C {{ app_checkout_bundle_path }}

  - fail:
      msg: |
          "to enable ssl please provide all of the following variables:
            - nginx_enable_ssl,
            - ssl_key,
            - ssl_certificate,
            - nginx_ssl_key_file_name
            - nginx_ssl_cert_file_name"
    when: (nginx_enable_ssl and not (
      ssl_key is defined
      and ssl_certificate is defined
      and nginx_ssl_key_file_name is defined
      and nginx_ssl_cert_file_name is defined
      ))

  - name: copy ssl key
    copy:
      content: "{{ ssl_key }}"
      dest: /etc/ssl/private/{{ nginx_ssl_key_file_name }}
    sudo: yes
    when: nginx_enable_ssl
    notify:
      - restart nginx

  - name: copy ssl cert
    copy:
      content: "{{ ssl_certificate }}"
      dest: /etc/ssl/certs/{{ nginx_ssl_cert_file_name }}
    sudo: yes
    when: nginx_enable_ssl
    notify:
      - restart nginx

  - name: ensure app group exists
    group: name={{ passenger_group }} state=present
    sudo: yes

  - name: ensure app user exists
    user: name={{ passenger_user }} group={{ passenger_group }} shell=/bin/bash
    sudo: yes

  - name: create directory
    sudo: yes
    file:
      path={{ app_root_dir }}
      state=directory
      owner={{ ansible_ssh_user }}
      group={{ ansible_ssh_user }}


  - name: check for package.json
    stat: path={{ app_checkout_bundle_path }}/bundle/package.json
    register: package_json

  - name: install npm packages for app
    command:
      chdir={{ app_checkout_bundle_path }}/bundle
      meteor npm install --production
    when: package_json.stat.exists

  - name: "install node-gyp globally"
    npm:
      name: node-gyp
      global: yes
    sudo: yes

  - command: node-gyp clean

  - name: install npm packages for server
    command:
      chdir={{ app_checkout_bundle_path }}/bundle/programs/server
      npm install --production

  - name: ensure correct owner, group and permissions
    file:
      path={{ app_checkout_bundle_path }}
      owner={{ passenger_user }}
      group={{ passenger_group }}
      mode=0755
      recurse=true
    sudo: yes

  - name: copy nginx conf
    template:
      backup=true
      dest=/etc/nginx/sites-available/{{ nginx_config_file_name | mandatory }}
      src=nginx-site-config.j2
    sudo: yes
    notify:
      - restart nginx

  - name: make sure symlink exists
    file:
      src=/etc/nginx/sites-available/{{ nginx_config_file_name | mandatory }}
      dest=/etc/nginx/sites-enabled/{{ nginx_config_file_name }}
      state=link
    sudo: yes

  - name: make sure nginx is running
    service: name=nginx state=started
