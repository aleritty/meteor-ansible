#- hosts: all
#  sudo: yes
#  roles:
#      - { role: telusdigital.logdna, when: logdna_secret_key is defined }


- hosts: localhost
  sudo: no
  tasks:
    - debug: msg={{ hostvars }}
    - name: clone repo from github
      git: repo={{ app_git_repo | mandatory }}
           update=yes
           dest={{ flowkey_app_dir }}
           version={{ app_git_checkout }}
           accept_hostkey=yes
           force=yes
      register: git_checkout_result
      until: git_checkout_result|succeeded # bug in ansible 2.2, https://github.com/ansible/ansible-modules-core/issues/5504#issuecomment-265923220

    - debug: msg={{ git_checkout_result }}

    - name: ensure target dir exists
      file: path=flowkey_build_dir state=directory

    - name: lookup bundles on s3
      s3: bucket="{{ s3_bucket }}"
          mode=list
          marker="{{ git_checkout_result.after }}"
          region=eu-west-1
          aws_secret_key={{ aws_secret_key }}
          aws_access_key={{ aws_access_key }}
      register: s3_list_result


    - name: check whether bundle already exists
      set_fact: s3_bundle_already_exists=True
      when: 's3_list_result.s3_keys[0] is defined and "{{ git_checkout_result.after }}" in s3_list_result.s3_keys[0]'
      ignore_errors: True

    - name: ensure build destination path exists
      file: path={{ flowkey_build_dir }}/{{ git_checkout_result.after }} state=directory


    - debug: msg="{{flowkey_app_dir}}"
    - name: install required npm packages
      command:
        chdir="{{ flowkey_app_dir }}"
        meteor npm install

    - name: build meteor app
      command:
        chdir="{{ flowkey_app_dir }}"
        meteor build {{ flowkey_build_dir }}/{{ git_checkout_result.after }} --server-only {% if app_mobile_server is defined %} --server {{ app_mobile_server }} {% endif %} --allow-superuser
      register: meteor_build_result
      async: 600
      poll: 5
      when: s3_bundle_already_exists is not defined

    - name: find exact path to bundle
      find: paths="{{ flowkey_build_dir }}{{ git_checkout_result.after }}"
            patterns="*.tar.gz"
      register: bundle_file
      when: s3_bundle_already_exists is not defined

    - name: get app settings
      command: cat "{{ flowkey_app_dir }}/{{ meteor_settings_file }}"
      register: var_meteor_settings
      when: meteor_settings_file is defined

    - set_fact: meteor_settings=True
      when: meteor_settings_file is defined

    - set_fact: meteor_settings=False
      when: not meteor_settings_file is defined

    - set_fact: deploy_git_commit={{ git_checkout_result.after }}

    - name: upload local bundle to s3
      s3: bucket={{ s3_bucket }}
          src="{{ bundle_file.files[0].path }}"
          object="{{ git_checkout_result.after }}.tar.gz"
          mode=put
          region=eu-west-1
          aws_secret_key={{ aws_secret_key }}
          aws_access_key={{ aws_access_key }}
      when: s3_bundle_already_exists is not defined

- hosts: mongoservers
  sudo: yes
  roles:
    - mongodb

- hosts: appservers
  sudo: yes
  vars:
    deploy_git_commit: "{{ git_checkout_result.after }}"
  #vars_files:
  #  - vars/main.yml
  #  - group_vars/{{ groupEnvConfigFile }}
  roles:
    - nodejs
    - nginx-passenger
    - meteorapp
  vars:
    nodejs_npm_modules: ["fibers", "meteorite"]

- hosts: loadbalancers
  sudo: yes
  roles:
    - ansible-haproxy

